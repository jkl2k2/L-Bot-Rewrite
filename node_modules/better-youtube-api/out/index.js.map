{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import { Video, Channel, Playlist, YTComment } from './entities'\nimport { parseUrl, request } from './util'\nimport { Cache } from './util/caching'\nimport { OAuth } from './oauth'\nexport * from './entities'\nexport * from './types'\n\n/**\n * The main class used to interact with the YouTube API. Use this.\n */\nexport class YouTube {\n  private _shouldCache: boolean\n  private _cacheSearches: boolean\n  private _cacheTTL: number\n  private _token: string\n\n  get token (): string {\n    return this._token\n  }\n  set token (val: string) {\n    this._token = val\n    this.tokenType = val.startsWith('ya29') ? 'oauth' : 'key'\n  }\n\n  public tokenType: 'key' | 'oauth'\n\n  /**\n   * Methods requiring an OAuth token\n   */\n  public oauth: OAuth\n\n  /**\n   *\n   * @param token Your YouTube Data API v3 token. Don't share this with anybody.\n   * It could be an API key or an OAuth 2.0 token.\n   * @param options Caching options. Recommended to change.\n   */\n  constructor (token: string, options: YouTubeOptions = { cache: true, cacheTTL: 600, cacheCheckInterval: 600, cacheSearches: false }) {\n    this.token = token\n\n    this.oauth = new OAuth(this)\n\n    this._shouldCache = options.cache\n    this._cacheSearches = options.cacheSearches\n    this._cacheTTL = options.cacheTTL\n\n    if (options.cacheCheckInterval > 0) {\n      setInterval(Cache.checkTTLs, options.cacheCheckInterval * 1000)\n    }\n  }\n\n  public _cache (id: string, value: any) {\n    if (!this._shouldCache) {\n      return\n    }\n\n    Cache.set(id, value, this._cacheTTL > 0 ? this._cacheTTL * 1000 + new Date().getTime() : 0)\n  }\n\n  /**\n   * Search supported entities on YouTube.\n   * @param types An array of types to search for. May be a single type or multiple types.\n   * @param searchTerm What to search for on YouTube.\n   * @param maxResults The maximum amount of results to find. Defaults to 10.\n   */\n  public search (types: (typeof Video | typeof Channel | typeof Playlist)[], searchTerm: string, maxResults: number = 10) {\n    return this._search(types, searchTerm, maxResults)\n  }\n\n  /**\n   * Search videos on YouTube.\n   * @param searchTerm What to search for on YouTube.\n   * @param maxResults The maximum amount of results to find. Defaults to 10.\n   */\n  public searchVideos (searchTerm: string, maxResults: number = 10) {\n    return this.search([ Video ], searchTerm, maxResults) as Promise<Video[]>\n  }\n\n  /**\n   * Search channels on YouTube.\n   * @param searchTerm What to search for on YouTube.\n   * @param maxResults The maximum amount of results to find. Defaults to 10.\n   */\n  public searchChannels (searchTerm: string, maxResults: number = 10) {\n    return this.search([ Channel ], searchTerm, maxResults) as Promise<Channel[]>\n  }\n\n  /**\n   * Search playlists on YouTube.\n   * @param searchTerm What to search for on YouTube.\n   * @param maxResults The maximum amount of results to find. Defaults to 10.\n   */\n  public searchPlaylists (searchTerm: string, maxResults: number = 10) {\n    return this.search([ Playlist ], searchTerm, maxResults) as Promise<Playlist[]>\n  }\n\n  /**\n   * Get a video object from the URL, ID, or Title of a video.\n   * @param videoResolvable The URL, ID, or Title of the video.\n   */\n  public async getVideo (videoResolvable: string) {\n    const id = await this.getId(videoResolvable, 'video')\n    return this.getItemById(Video, id) as Promise<Video>\n  }\n\n  /**\n   * Get a channel object from the Username, URL or ID of a channel.\n   * @param channelResolvable The Username, URL or ID of the channel.\n   */\n  public async getChannel (channelResolvable: string) {\n    const id = await this.getId(channelResolvable, 'channel')\n    return this.getItemById(Channel, id) as Promise<Channel>\n  }\n\n  /**\n   * Get a playlist object from the URL, ID, or Title of a playlist.\n   * @param playlistResolvable The URL, ID, or Title of the playlist.\n   */\n  public async getPlaylist (playlistResolvable: string) {\n    const id = await this.getId(playlistResolvable, 'playlist')\n    return this.getItemById(Playlist, id) as Promise<Playlist>\n  }\n\n  /**\n   * Get a comment object from the ID of a comment.\n   * @param id The ID of the comment.\n   */\n  public getComment (commentId: string) {\n    return this.getItemById(YTComment, commentId) as Promise<YTComment>\n  }\n\n  /**\n   * @deprecated Use getVideo() instead\n   * Get a video object from the url of a video.\n   * @param url The url of the video.\n   */\n  /* istanbul ignore next */\n  public getVideoByUrl (url: string) {\n    const id = parseUrl(url)\n\n    if (!id.video) {\n      return Promise.reject('Not a valid video url')\n    }\n\n    return this.getItemById(Video, id.video) as Promise<Video>\n  }\n\n  /**\n   * @deprecated Use getChannel() instead\n   * Get a channel object from the url of a channel.\n   * @param url The url of the channel.\n   */\n  /* istanbul ignore next */\n  public getChannelByUrl (url: string) {\n    const id = parseUrl(url)\n\n    if (!id.channel) {\n      return Promise.reject('Not a valid channel url')\n    }\n\n    return this.getItemById(Channel, id.channel) as Promise<Channel>\n  }\n\n  /**\n   * @deprecated Use getPlaylist() instead\n   * Get a playlist object from the url of a playlist.\n   * @param url The url of the playlist.\n   */\n  /* istanbul ignore next */\n  public getPlaylistByUrl (url: string) {\n    const id = parseUrl(url)\n\n    if (!id.playlist) {\n      return Promise.reject('Not a valid playlist url')\n    }\n\n    return this.getItemById(Playlist, id.playlist) as Promise<Playlist>\n  }\n\n  /**\n   * Get `maxResults` videos in a playlist. Used mostly internally with `Playlist#fetchVideos`.\n   * @param playlistResolvable The URL, ID, or Title of the playlist.\n   * @param maxResults The maximum amount of videos to get from the playlist. If <= 0 or not included, returns all videos in the playlist.\n   */\n  public async getPlaylistItems (playlistResolvable: string, maxResults: number = -1) {\n    const playlistId = await this.getId(playlistResolvable, 'playlist')\n    return this.getPaginatedItems('playlistItems', playlistId, maxResults) as Promise<Video[]>\n  }\n\n  /**\n   * Get `maxResults` comments from a video. Used mostly internally with `Video#fetchComments`.\n   * @param videoResolvable The URL, ID, or Title of the video.\n   * @param maxResults The maximum amount of comments to get from the video. If <= 0 or not included, returns all comments on the video.\n   */\n  public async getVideoComments (videoResolvable: string, maxResults: number = -1) {\n    const videoId = await this.getId(videoResolvable, 'video')\n    return this.getPaginatedItems('commentThreads:video', videoId, maxResults) as Promise<YTComment[]>\n  }\n\n  /**\n   * Get `maxResults` comments from a channel's discussion tab. Used mostly internally with `Channel#fetchComments`.\n   * @param channelResolvable The Username, URL, or ID of the channel.\n   * @param maxResults The maximum amount of comments to get from the channel. If <= 0 or not included, returns all comments on the channel.\n   */\n  public async getChannelComments (channelResolvable: string, maxResults: number = -1) {\n    const channelId = await this.getId(channelResolvable, 'channel')\n    return this.getPaginatedItems('commentThreads:channel', channelId, maxResults) as Promise<YTComment[]>\n  }\n\n  /**\n   * Get `maxResults` of a channel's playlists. Used mostly internally with `Channel#fetchPlaylists`.\n   * @param channelResolvable The Username, URL, or ID of the channel.\n   * @param maxResults The maximum amount of playlists to get from the channel. If <= 0 or not included, returns all playlists.\n   */\n  public async getChannelPlaylists (channelResolvable: string, maxResults: number = -1) {\n    const channelId = await this.getId(channelResolvable, 'channel')\n    return this.getPaginatedItems('playlists:channel', channelId, maxResults) as Promise<Playlist[]>\n  }\n\n  /**\n   * Get `maxResults` replies to a comment. Used mostly internally with `Comment#fetchReplies`.\n   * @param commentId The ID of the comment to get replies from.\n   * @param maxResults The maximum amount of replies to get. Gets all replies if <= 0 or not included.\n   */\n  public getCommentReplies (commentId: string, maxResults: number = -1) {\n    return this.getPaginatedItems('comments', commentId, maxResults) as Promise<YTComment[]>\n  }\n\n  /* istanbul ignore next */\n  private async _search (types: (typeof Video | typeof Channel | typeof Playlist)[], searchTerm: string, maxResults: number = 10): Promise<(Video | Channel | Playlist)[]> {\n    const type = types.map(t => t.endpoint.substring(0, t.endpoint.length - 1)).join(',')\n    const cached = Cache.get(`search://${type}/\"${searchTerm}\"/${maxResults}`)\n\n    if (this._shouldCache && cached) {\n      return cached\n    }\n\n    if (maxResults < 1 || maxResults > 50) {\n      return Promise.reject('Max results must be greater than 0 and less than or equal to 50')\n    }\n\n    const fields = 'items(kind,id,snippet(title,description,thumbnails,publishedAt,channelId))'\n    const results = await request.api('search', {\n      q: encodeURIComponent(searchTerm),\n      fields: encodeURIComponent(fields),\n      maxResults,\n      part: 'snippet',\n      type\n    }, this.token, this.tokenType)\n\n    const items = []\n\n    results.items.forEach(item => {\n      if (item.id.videoId) {\n        items.push(new Video(this, item))\n      } else if (item.id.channelId) {\n        items.push(new Channel(this, item))\n      } else if (item.id.playlistId) {\n        items.push(new Playlist(this, item))\n      }\n    })\n\n    if (this._shouldCache && this._cacheSearches) {\n      this._cache(`search://${type}/\"${searchTerm}\"/${maxResults}`, items)\n    }\n\n    return items\n  }\n\n  /* istanbul ignore next */\n  private async getItemById (type: typeof Video | typeof Channel | typeof Playlist | typeof YTComment, id: string): Promise<Video | Channel | Playlist | YTComment> {\n    if (!([ Video, Channel, Playlist, YTComment ].includes(type))) {\n      return Promise.reject('Type must be a video, channel, playlist, or comment.')\n    }\n\n    const cached = Cache.get(`get://${type.endpoint}/${id}`)\n\n    if (this._shouldCache && cached) {\n      return cached\n    }\n\n    const result = await request.api(type.endpoint, {\n      id,\n      fields: encodeURIComponent(type.fields),\n      part: type.part\n    }, this.token, this.tokenType)\n\n    if (result.items.length === 0) {\n      return Promise.reject('Item not found')\n    }\n\n    let endResult: Video | Playlist | Channel | YTComment = new type(this, result.items[0], result.items[0].snippet.channelId ? 'channel' : 'video')\n\n    if (this._shouldCache) {\n      this._cache(`get://${type.endpoint}/${id}`, endResult)\n    }\n\n    return endResult\n  }\n\n  /* istanbul ignore next */\n  private async getPaginatedItems (endpoint: 'playlistItems' | 'playlists' | 'playlists:channel' | 'commentThreads' |\n    'commentThreads:video' | 'commentThreads:channel' | 'comments', id: string, maxResults: number = -1): Promise<Video[] | YTComment[] | Playlist[]> {\n    const cached = Cache.get(`get://${endpoint}/${id}/${maxResults}`)\n\n    if (this._shouldCache && cached) {\n      return cached\n    }\n\n    let full: boolean\n    let items = []\n\n    if (maxResults <= 0) {\n      full = true\n    } else {\n      full = false\n    }\n\n    const options: {\n      part: string,\n      maxResults: number,\n      videoId?: string,\n      parentId?: string,\n      textFormat?: string,\n      playlistId?: string,\n      channelId?: string,\n      pageToken?: string\n    } = {\n      part: 'snippet',\n      maxResults: 0\n    }\n\n    let max: number\n    let clazz: typeof Video | typeof YTComment | typeof Playlist\n    let commentType: 'video' | 'channel'\n\n    if (endpoint === 'playlistItems') {\n      max = 50\n      clazz = Video\n      options.playlistId = id\n    } else if (endpoint.startsWith('commentThreads')) {\n      max = 100\n      clazz = YTComment\n\n      const [, type ] = endpoint.split(':') as ('video' | 'channel')[]\n\n      commentType = type ? type : 'video'\n      endpoint = 'commentThreads'\n      options[`${type}Id`] = id\n      options.part += ',replies'\n      options.textFormat = 'plainText'\n    } else if (endpoint === 'comments') {\n      max = 100\n      clazz = YTComment\n      options.parentId = id\n    } else if (endpoint === 'playlists:channel') {\n      max = 50\n      clazz = Playlist\n      endpoint = 'playlists'\n      options.part += ',contentDetails,player'\n      options.channelId = id\n    } else {\n      return Promise.reject('Unknown item type ' + endpoint)\n    }\n\n    if (maxResults > max) {\n      return Promise.reject(`Max results must be ${max} or below for ${endpoint}`)\n    }\n\n    options.maxResults = full ? max : maxResults\n\n    let results\n    let pages = null\n    let shouldReturn = !full\n\n    for (let i = 1; i < pages ? pages : 3; i++) {\n      results = await request.api(endpoint, options, this.token, this.tokenType).catch(() => {\n        return Promise.reject('Items not found')\n      })\n\n      if (results.items.length === 0) {\n        return Promise.reject('Items not found')\n      }\n\n      if (!pages) {\n        pages = results.pageInfo.totalResults / results.pageInfo.resultsPerPage\n\n        if (pages <= 1) {\n          shouldReturn = true\n        }\n\n        pages = Math.floor(pages)\n      }\n\n      results.items.forEach(item => {\n        let comment: YTComment\n\n        if (item.snippet.topLevelComment) {\n          comment = new YTComment(this, item.snippet.topLevelComment, commentType)\n          items.push(comment)\n        } else {\n          items.push(new clazz(this, item, commentType))\n        }\n\n        if (item.replies) {\n          item.replies.comments.forEach(reply => {\n            const created = new YTComment(this, reply, commentType)\n            comment.replies.push(created)\n          })\n        }\n      })\n\n      if (results.nextPageToken && !shouldReturn) {\n        options.pageToken = results.nextPageToken\n      } else {\n        return items\n      }\n    }\n\n    if (this._shouldCache) {\n      this._cache(`get://${endpoint}/${id}/${maxResults}`, items)\n    }\n\n    return items\n  }\n\n  /* istanbul ignore next */\n  private async getId (input: string, type: 'playlist' | 'channel' | 'video'): Promise<string> {\n    let id: string = null\n\n    if (input.includes('youtube.com') || input.includes('youtu.be')) {\n      const idFromUrl = parseUrl(input)[type]\n\n      // Custom channel URLs don't work that well\n      if (type === 'channel' && idFromUrl && !idFromUrl.startsWith('UC')) {\n        id = await request.api('search', { q: idFromUrl, type, part: 'id' }, this.token, this.tokenType).then(r => r.items[0] ? r.items[0].id.channelId : undefined)\n      }\n\n      id = idFromUrl\n    }\n\n    if (id !== null && id !== undefined && id !== '') {\n      return id\n    }\n\n    if (type === 'channel' && (!input.startsWith('UC') || input.includes(' '))) {\n      id = await request.api('search', { q: input, type, part: 'id', maxResults: 1 }, this.token, this.tokenType).then(r => r.items[0] ? r.items[0].id.channelId : undefined)\n    } else if (type === 'playlist' && input.includes(' ')) {\n      id = await request.api('search', { q: input, type, part: 'id', maxResults: 1 }, this.token, this.tokenType).then(r => r.items[0] ? r.items[0].id.playlistId : undefined)\n    } else if (type === 'video' && (input.length < 11 || input.includes(' '))) {\n      id = await request.api('search', { q: input, type, part: 'id', maxResults: 1 }, this.token, this.tokenType).then(r => r.items[0] ? r.items[0].id.videoId : undefined)\n    } else {\n      id = input\n    }\n\n    if (id === null || id === undefined || id === '') {\n      return Promise.reject('Item not found')\n    }\n\n    return id\n  }\n}\n\ntype YouTubeOptions = {\n  /**\n   * Whether or not to cache entities.\n   */\n  cache?: boolean\n\n  /**\n   * How long to cache entities in seconds (0 = unlimited).\n   */\n  cacheTTL?: number\n\n  /**\n   * How often to check for and delete expired cached items in seconds.\n   */\n  cacheCheckInterval?: number\n\n  /**\n   * Whether or not we should cache searches\n   */\n  cacheSearches?: boolean\n}\n\nexport default YouTube\n"],"sourceRoot":"../src"}